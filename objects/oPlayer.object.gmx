<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayerStill</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Globals

canFire = true;
canBeHit = true;
health = 100;

// All available guns
//guns[0] = oPistolBullet;
// set default gun to pistol
//currentGun = guns[0];
currentGun = oPistolBullet;
lastPickUp = oShotgun;

gooDamage = 0;
showGooWarning = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (gooDamage &gt;= 99) {
    instance_create(0, 0, oGameOverGoo);
} else {
    instance_create(0, 0, oGameOver);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// if alarm is done counting down, fire this event
canBeHit = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// if alarm is done counting down, fire this event
canFire = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Player Update */

var playerSpeed = 400 / room_speed;
var isMoving = false;

image_angle = point_direction(x, y, mouse_x, mouse_y);

/* Movement */
if (keyboard_check(ord("W")) || keyboard_check(ord("A")) ||
        keyboard_check(ord("S")) || keyboard_check(ord("D"))) { 
    isMoving = true; 
} else {
    isMoving = false;
}

if (isMoving) {
    sprite_index = sPlayerMoving;
} else {
    sprite_index = sPlayerStill;
}

if (keyboard_check(ord("W"))) { y -= playerSpeed; }
if (keyboard_check(ord("A"))) { x -= playerSpeed; }
if (keyboard_check(ord("S"))) { y += playerSpeed; }
if (keyboard_check(ord("D"))) { x += playerSpeed; }

/* Firing */
if (mouse_check_button_pressed(mb_left) &amp;&amp; canFire == true) {
    // currentGun defined at create, pistol by default. Will change with pickups
    FireGun(currentGun);
    canFire = false;
    alarm[0] = currentGun.gunSpeed; // see alarm[0] event
    
    // Change gun to pistol if out of ammo
    if (currentGun != oPistolBullet) {
        lastPickUp.ammo -= 1;
        if (lastPickUp.ammo &lt;= 0) {
            currentGun = oPistolBullet;
            audio_play_sound(aReloadSound, 1, false);
            // destroy pickup
            with lastPickUp {
                instance_destroy();
                //image_xscale = 0;
                //image_yscale = image_xscale;
            }
        }
    }

}

/* Collisions */
// Enemies

var collidingEnemy = instance_place(x, y, oEnemyParent);
if (instance_exists(collidingEnemy) &amp;&amp; canBeHit == true) {
    audio_play_sound(aHitSound, 1, false);
    health -= collidingEnemy.dmg;
    canBeHit = false;
    alarm[1] = room_speed / 2;
    
    for (var i = 0; i &lt; 8; i++) {
        var bloodSplatter = instance_create(x, y, oBlood);
        bloodSplatter.direction = random(360);
        bloodSplatter.speed = random_range(200/room_speed, 400/room_speed);
    }
}

if (health &lt; 0) {
    instance_destroy();
}

// Pickups
var pickup = instance_place(x, y, oPickupParent);
if (instance_exists(pickup)) {
    currentGun = pickup.gunType;
    lastPickUp = pickup;
    // make pickup dissapear, but keep so that its ammo property can be used
    pickup.image_xscale = 0;
    pickup.image_yscale = 0;
}

// Boundaries
CheckRoomCollide();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///camera follows player
if (instance_exists(oPlayer)) {
    view_xview[0]=x-(view_wview[0]/2);
    view_yview[0]=y-(view_hview[0]/2);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Goo damage
if (instance_place(x, y, oCorpse)) {
    gooDamage+= 0.75;
} else if (gooDamage &gt; 0) {
    gooDamage -= 0.1;
} else {
    gooDamage = 0;
}

// Max goo level -- destroy player
if (gooDamage &gt;= 70) {
    showGooWarning = true;
} else {
    showGooWarning = false;
}
if (gooDamage &gt;= 100) {
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
