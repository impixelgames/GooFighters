<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sBabyGoo</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oEnemyParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
* Enemy moves in a random direction, bouces off walls
*/
speed = 290 / room_speed;
//direction = random(360);
dmg = 10;
spawnCount = 1500 / room_speed; // prevent spawn kills
isCollideCount = 0; // enemy to enemy collide
hp = 50;
changeDirCount = 0;

// Damage buffer
dmgBuffer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// spawned by king goo
// Movement
image_angle = direction;
// Randomly change direction every x frames
if (changeDirCount &lt; 0) {
    direction = random(360);
    changeDirCount = 50;
}
changeDirCount--;

// Reset size after damage taken
if (image_xscale &lt; 1) {
    image_xscale += 0.05;
    image_yscale += 0.05;
}

// Collisions
EnemyBoundaryCollide();
EnemyWithEnemyCollision();

var incomingProjectile = instance_place(x, y, oPlayerProjectile);

// Buffer to prevent instance goo death
dmgBuffer--;

if (instance_exists(incomingProjectile)) {
    // Damage buffer
    if (dmgBuffer &lt; 0) {
        hp -= incomingProjectile.dmg;
        // Show damage is taken
        image_xscale = 0.65;
        image_yscale = image_xscale;    
        dmgBuffer = 5;
        
        // generate some gibs
        for (var i = 0; i &lt; 6; i++) {
            var babyGib = instance_create(x, y, oBabyGib);
            babyGib.direction = random(360);
        }
        
        audio_play_sound(aHitSound, 1, false);
    }
    
    // remove projectile (unless shotty)
    if (instance_exists(oPlayer) &amp;&amp; oPlayer.currentGun != oShotgunBullet) {
        with (incomingProjectile) {
            instance_destroy();
        }
    }
    
    if (hp &lt; 0) {
        score += 5;
        //GeneratePickup(x, y);
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
